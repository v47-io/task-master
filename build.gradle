plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.20' apply false

    id 'com.gorylenko.gradle-git-properties' version '2.2.3' apply false

    id 'io.gitlab.arturbosch.detekt' version '1.14.2' apply false
    id 'jacoco'
    id 'de.jansauer.printcoverage' version '2.0.0'

    id 'org.jetbrains.dokka' version '1.4.20' apply false
    id 'net.researchgate.release' version '2.8.1'

    id 'com.github.hierynomus.license' version '0.15.0' apply false

    id 'maven-publish'
    id 'name.remal.maven-publish-ossrh' version '1.1.4' apply false
}

apply from: 'config/gradle/libraries.gradle'

subprojects { Project subproject ->
    apply plugin: 'org.jetbrains.kotlin.jvm'

    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'jacoco'

    apply plugin: 'com.github.hierynomus.license'

    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'maven-publish'

    sourceSets {
        main {
            kotlin {
                srcDirs {
                    'src'
                }
            }
            java {
                srcDir 'src-java'
                srcDir 'src-gen'
            }
            resources {
                srcDir 'resources'
                srcDir 'resources-gen'
            }
        }
        test {
            kotlin {
                srcDirs {
                    'test'
                }
            }
            java {
                srcDir 'test-java'
            }
            resources {
                srcDir 'test-resources'
            }
        }
    }

    sourceCompatibility = 8
    targetCompatibility = 8

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = [
                    '-Xallow-result-return-type',
                    '-Xno-param-assertions',
                    '-Xno-call-assertions'
            ]
            jvmTarget = '1.8'
            javaParameters = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            javaParameters = true
        }
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    apply from: '../config/gradle/libraries.gradle'

    dependencies {
        implementation libraries.slf4j

        testImplementation libraries.junit
        testRuntimeOnly libraries.logback
    }

    clean {
        delete files('src-gen')
        delete files('resources-gen')
    }

    detekt {
        input = files('src')
        config = files("$rootDir/config/detekt/detekt.yml")

        reports {
            xml {
                enabled = true
                destination = file("$buildDir/reports/detekt.xml")
            }
        }
    }

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    license {
        exclude '**/*.json'
        exclude '**/*.properties'
        exclude '**/META-INF/**/*'

        header = file('../HEADER.txt')

        ext {
            year = Calendar.getInstance().get(Calendar.YEAR)
        }
    }

    jar {
        manifest {
            attributes('Automatic-Module-Name': "${subproject.group}.${subproject.name}".replaceAll('[^\\w\\.\\$_]', "_"))
            attributes('Implementation-Version': project.version)
            attributes('Implementation-Title': 'TaskMaster for Kotlin')
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        archiveClassifier = 'javadoc'
        from dokkaJavadoc.outputDirectory
    }

    artifacts {
        archives(sourcesJar)
        archives(javadocJar)
    }
}

repositories {
    jcenter()
    mavenCentral()
}

release {
    tagTemplate = 'v$version'
}

task build(group: 'build') {
    dependsOn subprojects.findResults { it.tasks.findByName('build') }
}

task clean(group: 'build') {
    dependsOn subprojects.findResults { it.tasks.findByName('clean') }

    delete files('build')
}

task test(group: 'verification') {
    dependsOn subprojects.findResults { it.tasks.findByName('test') }
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
    description = 'Generates an aggregate report from all subprojects'

    def selectedProjects = subprojects.findAll { !it.name.contains('test-support') }

    dependsOn(selectedProjects.test)

    additionalSourceDirs.from files(selectedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(selectedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from files(selectedProjects.sourceSets.main.output)
    executionData.from files(selectedProjects.jacocoTestReport.executionData)

    doFirst {
        executionData.from files(executionData.findAll { it.exists() })
    }

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

task copyJacocoRootReport(type: Copy) {
    from(jacocoRootReport) {
        include "jacocoRootReport.xml"
    }

    rename("jacocoRootReport.xml", "jacocoTestReport.xml")
    into "$buildDir/reports/jacoco/test"
}

jacocoRootReport.finalizedBy(copyJacocoRootReport)

printCoverage.dependsOn jacocoRootReport
test.finalizedBy(printCoverage)
